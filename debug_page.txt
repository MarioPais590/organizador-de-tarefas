<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Diagnóstico de Tela Branca</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f9f9f9;
    }
    h1, h2 {
      color: #2563eb;
    }
    pre {
      background-color: #272822;
      color: #f8f8f2;
      padding: 15px;
      border-radius: 4px;
      overflow-x: auto;
    }
    button {
      background-color: #2563eb;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
      margin: 5px;
      font-size: 14px;
    }
    button:hover {
      background-color: #1d4ed8;
    }
    #results {
      margin-top: 20px;
      padding: 15px;
      background-color: #fff;
      border-radius: 4px;
      border: 1px solid #e5e7eb;
    }
    .error {
      color: #ef4444;
    }
    .success {
      color: #10b981;
    }
    details {
      margin: 10px 0;
      border: 1px solid #e5e7eb;
      border-radius: 4px;
    }
    summary {
      padding: 10px;
      background-color: #f3f4f6;
      cursor: pointer;
    }
    details div {
      padding: 10px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 20px 0;
    }
    .card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  <h1>Ferramenta de Diagnóstico - Tela Branca</h1>
  <p>Esta página ajuda a diagnosticar e resolver problemas de tela branca no aplicativo Organizador de Tarefas.</p>
  
  <div class="grid">
    <div class="card">
      <h2>Informações do Sistema</h2>
      <div id="system-info">Carregando...</div>
    </div>
    
    <div class="card">
      <h2>Verificação de Armazenamento</h2>
      <div id="storage-info">Carregando...</div>
    </div>
  </div>
  
  <h2>Ações de Diagnóstico</h2>
  <div>
    <button id="check-app">Verificar Aplicativo</button>
    <button id="clear-cache">Limpar Cache</button>
    <button id="reset-service-worker">Reiniciar Service Worker</button>
    <button id="goto-app">Ir para Aplicativo</button>
  </div>
  
  <div id="results">
    <h2>Resultados do Diagnóstico</h2>
    <p>Execute uma das ações acima para iniciar o diagnóstico.</p>
  </div>
  
  <details>
    <summary>Detalhes Técnicos</summary>
    <div>
      <pre id="technical-details">Nenhum detalhe técnico disponível.</pre>
    </div>
  </details>

  <script>
    // Função para exibir informações do sistema
    function displaySystemInfo() {
      const systemInfoDiv = document.getElementById('system-info');
      const browserInfo = navigator.userAgent;
      
      let browserName = 'Desconhecido';
      if (browserInfo.indexOf('Chrome') > -1) browserName = 'Chrome';
      else if (browserInfo.indexOf('Firefox') > -1) browserName = 'Firefox';
      else if (browserInfo.indexOf('Safari') > -1) browserName = 'Safari';
      else if (browserInfo.indexOf('Edge') > -1) browserName = 'Edge';
      
      let osName = 'Desconhecido';
      if (browserInfo.indexOf('Windows') > -1) osName = 'Windows';
      else if (browserInfo.indexOf('Mac') > -1) osName = 'macOS';
      else if (browserInfo.indexOf('Linux') > -1) osName = 'Linux';
      else if (browserInfo.indexOf('Android') > -1) osName = 'Android';
      else if (browserInfo.indexOf('iOS') > -1) osName = 'iOS';
      
      systemInfoDiv.innerHTML = `
        <p><strong>Navegador:</strong> ${browserName}</p>
        <p><strong>Sistema Operacional:</strong> ${osName}</p>
        <p><strong>Resolução:</strong> ${window.innerWidth}x${window.innerHeight}</p>
      `;
    }
    
    // Função para verificar disponibilidade de armazenamento
    function checkStorage() {
      const storageInfoDiv = document.getElementById('storage-info');
      
      const hasLocalStorage = !!window.localStorage;
      const hasSessionStorage = !!window.sessionStorage;
      const hasIndexedDB = !!window.indexedDB;
      
      storageInfoDiv.innerHTML = `
        <p><strong>LocalStorage:</strong> <span class="${hasLocalStorage ? 'success' : 'error'}">${hasLocalStorage ? 'Disponível' : 'Indisponível'}</span></p>
        <p><strong>SessionStorage:</strong> <span class="${hasSessionStorage ? 'success' : 'error'}">${hasSessionStorage ? 'Disponível' : 'Indisponível'}</span></p>
        <p><strong>IndexedDB:</strong> <span class="${hasIndexedDB ? 'success' : 'error'}">${hasIndexedDB ? 'Disponível' : 'Indisponível'}</span></p>
      `;
    }
    
    // Função para verificar o aplicativo
    async function checkApp() {
      const resultsDiv = document.getElementById('results');
      const technicalDetailsDiv = document.getElementById('technical-details');
      
      resultsDiv.innerHTML = '<h2>Resultados do Diagnóstico</h2><p>Verificando aplicativo...</p>';
      
      try {
        // Verificar se há service worker registrado
        let swRegistered = false;
        if ('serviceWorker' in navigator) {
          const registrations = await navigator.serviceWorker.getRegistrations();
          swRegistered = registrations.length > 0;
        }
        
        // Verificar se há dados armazenados
        let hasLocalStorageData = false;
        let localStorageItems = [];
        
        if (window.localStorage && localStorage.length > 0) {
          hasLocalStorageData = true;
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            localStorageItems.push(key);
          }
        }
        
        // Verificar se o aplicativo está acessível
        let appAccessible = false;
        try {
          const response = await fetch('/');
          appAccessible = response.ok;
        } catch (error) {
          appAccessible = false;
        }
        
        // Exibir resultados
        resultsDiv.innerHTML = `
          <h2>Resultados do Diagnóstico</h2>
          <p><strong>Service Worker:</strong> <span class="${swRegistered ? 'success' : 'error'}">${swRegistered ? 'Registrado' : 'Não registrado'}</span></p>
          <p><strong>Dados no LocalStorage:</strong> <span class="${hasLocalStorageData ? 'success' : 'error'}">${hasLocalStorageData ? 'Existentes' : 'Inexistentes'}</span></p>
          <p><strong>Aplicativo Acessível:</strong> <span class="${appAccessible ? 'success' : 'error'}">${appAccessible ? 'Sim' : 'Não'}</span></p>
          
          <h3>Recomendações:</h3>
          <ul>
            ${!appAccessible ? '<li>O aplicativo não está acessível. Verifique se o servidor está rodando.</li>' : ''}
            ${!swRegistered ? '<li>Não há Service Worker registrado, o que é esperado após nossa correção.</li>' : '<li>Service Worker está registrado. Considere removê-lo clicando em "Reiniciar Service Worker".</li>'}
            ${hasLocalStorageData ? `<li>Dados encontrados no LocalStorage (${localStorageItems.length} itens). Se o problema persistir, considere limpar o cache.</li>` : '<li>Nenhum dado encontrado no LocalStorage. Problemas de inicialização podem estar relacionados à falta de dados importantes.</li>'}
          </ul>
        `;
        
        // Detalhes técnicos
        technicalDetailsDiv.textContent = JSON.stringify({
          serviceWorker: swRegistered,
          localStorage: {
            available: hasLocalStorageData,
            items: localStorageItems
          },
          appAccessible,
          userAgent: navigator.userAgent
        }, null, 2);
        
      } catch (error) {
        resultsDiv.innerHTML = `
          <h2>Resultados do Diagnóstico</h2>
          <p class="error">Erro ao verificar o aplicativo: ${error.message}</p>
        `;
        
        technicalDetailsDiv.textContent = error.stack || error.message;
      }
    }
    
    // Função para limpar o cache
    function clearCache() {
      const resultsDiv = document.getElementById('results');
      
      try {
        // Limpar localStorage
        if (window.localStorage) {
          localStorage.clear();
        }
        
        // Limpar sessionStorage
        if (window.sessionStorage) {
          sessionStorage.clear();
        }
        
        // Limpar caches do navegador (se disponível)
        if ('caches' in window) {
          caches.keys().then(cacheNames => {
            cacheNames.forEach(cacheName => {
              caches.delete(cacheName);
            });
          });
        }
        
        resultsDiv.innerHTML = `
          <h2>Limpeza de Cache</h2>
          <p class="success">Cache limpo com sucesso!</p>
          <p>Agora tente acessar o aplicativo novamente.</p>
        `;
      } catch (error) {
        resultsDiv.innerHTML = `
          <h2>Limpeza de Cache</h2>
          <p class="error">Erro ao limpar cache: ${error.message}</p>
        `;
      }
    }
    
    // Função para reiniciar o service worker
    async function resetServiceWorker() {
      const resultsDiv = document.getElementById('results');
      
      if (!('serviceWorker' in navigator)) {
        resultsDiv.innerHTML = `
          <h2>Reiniciar Service Worker</h2>
          <p class="error">Este navegador não suporta Service Workers.</p>
        `;
        return;
      }
      
      try {
        const registrations = await navigator.serviceWorker.getRegistrations();
        
        if (registrations.length === 0) {
          resultsDiv.innerHTML = `
            <h2>Reiniciar Service Worker</h2>
            <p>Nenhum Service Worker registrado para desregistrar.</p>
          `;
          return;
        }
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const registration of registrations) {
          try {
            const success = await registration.unregister();
            if (success) {
              successCount++;
            } else {
              errorCount++;
            }
          } catch (error) {
            errorCount++;
          }
        }
        
        resultsDiv.innerHTML = `
          <h2>Reiniciar Service Worker</h2>
          <p>${successCount} Service Worker(s) desregistrado(s) com sucesso.</p>
          ${errorCount > 0 ? `<p class="error">${errorCount} erro(s) encontrado(s).</p>` : ''}
          <p>É recomendado recarregar o navegador para que as alterações tenham efeito.</p>
          <button onclick="window.location.reload()">Recarregar Página</button>
        `;
      } catch (error) {
        resultsDiv.innerHTML = `
          <h2>Reiniciar Service Worker</h2>
          <p class="error">Erro ao reiniciar Service Worker: ${error.message}</p>
        `;
      }
    }
    
    // Inicializar
    document.addEventListener('DOMContentLoaded', () => {
      displaySystemInfo();
      checkStorage();
      
      // Adicionar event listeners aos botões
      document.getElementById('check-app').addEventListener('click', checkApp);
      document.getElementById('clear-cache').addEventListener('click', clearCache);
      document.getElementById('reset-service-worker').addEventListener('click', resetServiceWorker);
      document.getElementById('goto-app').addEventListener('click', () => {
        window.location.href = '/';
      });
    });
  </script>
</body>
</html> 